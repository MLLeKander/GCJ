ctuple Horse(int cnt, char rep);
boolean az(int... in) {
  for (int i : in) {
    if (i != 0) {
      return false;
    }
  }
  return true;
}

void add(StringBuilder out, Horse tmp) {
  out.append(tmp.rep);
  tmp.cnt--;
}

void add2(StringBuilder out, Horse a, Horse b, Horse c) {
  Horse[] h = new Horse[]{a,b,c};
  Arrays.sort(h);
  a = h[0]; b = h[1]; c = h[2];
  while (c.cnt > b.cnt && a.cnt > 0) {
    add(out, c);
    add(out, b);
    if (c.cnt > 0 && a.cnt > 0) {
      add(out, c);
      add(out, a);
    }
  }
  if (c.cnt > b.cnt) { throw new Asdf(); }
  while (c.cnt > 0) {
    add(out, c);
    add(out, b);
    if (a.cnt > 0) {
      add(out, a);
    }
  }
}

class Asdf extends RuntimeException {
}

boolean okay(int pure, int mix) { return mix == 0 || mix+1 <= pure; }

String glue(char a, char b, int n) {
  String out = a+"";
  for (i, n) {
    out += b;
    out += a;
  }
  return out;
}

String rep(String s, char a, char b, int n) {
  return s.replace(a+"",glue(a,b,n));
}

// G => R
// V => Y
// O => B
{
  int(n, r, o, y, g, b, v);
  new(StringBuilder, out)();
  if (az(v,y,o,b) && g == r) { return glue('R','G',g).substring(1); }
  if (az(g,r,o,b) && v == y) { return glue('Y','V',v).substring(1); }
  if (az(v,y,o,b) && o == b) { return glue('B','O',o).substring(1); }
  if (!okay(b, o) || !okay(y, v) || !okay(r,g)) {
    return "IMPOSSIBLE";
  }
  b -= o; r -= g; y -= v;
  try {
    add2(out, new Horse(r, 'R'), new Horse(y, 'Y'), new Horse(b, 'B'));
  } catch (Asdf a) {
    return "IMPOSSIBLE";
  }

  String s = out.toString();
  s = rep(s, 'R', 'G', g);
  s = rep(s, 'Y', 'V', v);
  s = rep(s, 'B', 'O', o);
  return s;
}
