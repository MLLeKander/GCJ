char[][] board;
int N;

int tmp(int r, int c) {
  char ch = board[r][c];
  if (ch == 'o') { return 0; }

  if (ch == '.') {
    int axisC = checkAxis(r,c), diagC = checkDiag(r,c);
    board[r][c] = axisC == 0 && diagC == 0 ? 'o' :
                  axisC == 0               ? 'x' :
                  diagC == 0               ? '+' :
                                             '.';
  } else if (ch == 'x' && checkDiag(r,c) == 0 || ch == '+' && checkAxis(r,c) == 0) {
    board[r][c] = 'o';
  }
  return board[r][c] != ch ? 1 : 0;
}

char[][] copyBoard() {
  int len1 = board.length, len2 = board[0].length;
  char[][] out = new char[len1][len2];
  
  for (int i = 0; i < len1; i++) {
    System.arraycopy(board[i], 0, out[i], 0, len2);
  }
  return out;
}

{
  N = int();
  int(M);
  board = new char[N][N];
  int count = 0;
  for (char[] row : board) { Arrays.fill(row, '.'); }

  for (i, M) {
    char ch = str().charAt(0);
    int(r,c);
    board[r-1][c-1] = ch;
  }

  char[][] initBoard = copyBoard();

    //v1
    //for (int r = N-1; r >= 0; r--) {
    //  for (int c = 0; c < N; c++) {
    //    count += tmp(r,c);
    //  }
    //}

  //v2
  for (int i = 0; i < N; i++) {
    for (int j = 0; j <= i; j++) {
      int r1 = i-j, c1 = j;
      int r2 = N-1-r1, c2 = N-1-c1;
      count += tmp(r1, c1);
      count += tmp(r1, c2);
      count += tmp(r2, c1);
      count += tmp(r2, c2);
    }
  }
  int score = score();

    //v3
    //char[][] actualBoard = board;
    //new(ArrayList<Integer>, indicies)(N*N);
    //for (i, N*N) {
    //  indicies.add(i);
    //}
    //int equalCount = 0;
    //for (i, 100) {
    //  board = initBoard;
    //  initBoard = copyBoard();
    //  Collections.shuffle(indicies);
    //  for (int index : indicies) {
    //    tmp(index%N, index/N);
    //  }
    //  int scoreTmp = score();
    //  if (scoreTmp > score) {
    //    eprintln("Random was better?");
    //    throw new RuntimeException();
    //  } else if (scoreTmp == score) {
    //    equalCount++;
    //  }
    //}
    //debug(equalCount);
    //board = actualBoard;

  if (!checkBoard()) {
    eprintln("Uh oh...");
  }

  println(score()+" "+count);
  for (int r = 0; r < N; r++) {
    for (int c = 0; c < N; c++) {
      if (board[r][c] != initBoard[r][c]) {
        println(board[r][c]+" "+r+" "+c);
        count--;
      }
    }
  }
  if (count != 0) {
    eprintln("Wrong count?");
  }
  return null;
}

int score() {
  int out = 0;
  for (char[] row : board) {
    for (char c : row) {
      if (c == '+' || c == 'x') { out++; }
      else if (c == 'o') { out+=2; }
    }
  }
  return out;
}

  /*boolean checkBoard(char[][] board) {
    int N = board.length;
    for (int i = 0; i < N; i++) {
      int count1 = 0, count2 = 0;
      for (int j = 0; j < N; j++) {
        if (!isRow(board[i][j])) { count1++; }
        if (!isRow(board[j][i])) { count2++; }
      }
      if (count1 >= 2 || count2 >= 2) { return false; }
    }
    for (int i = 0; i < N; i++) {
      int count1 = 0, count2 = 0, count3 = 0, count4 = 0;
      for (int j = 0; j <= i; j++) {
        int r1 = i-j, c1 = j;
        int r2 = N-1-r1, c2 = N-1-c1;
        if (!isDiag(board[r1][c1])) { count1++; }
        if (!isDiag(board[r1][c2])) { count2++; }
        if (!isDiag(board[r2][c1])) { count3++; }
        if (!isDiag(board[r2][c2])) { count4++; }
      }
      if (count1 >= 2 || count2 >= 2 || count3 >= 2 || count4 >= 2) { return false; }
    }
    return true;
  }
  
  boolean isRow(char c) { return c == '.' || c == '+'; }
  boolean isDiag(char c) { return c == '.' || c == 'x'; }*/

boolean checkBoard() {
  for (int i = 0; i < board.length; i++) {
    if (checkRow(i) >= 2) { return false; }
    if (checkCol(i) >= 2) { return false; }
    if (checkDiagDR(i, 0) >= 2) { return false; }
    if (checkDiagDR(0, i) >= 2) { return false; }
    if (checkDiagUR(i, 0) >= 2) { return false; }
    if (checkDiagUR(i, i) >= 2) { return false; }
  }
  return true;
}

int checkAxis(int r, int c) { return Math.max(checkRow(r), checkCol(c)); }
int checkDiag(int r, int c) { return Math.max(checkDiagDR(r, c), checkDiagUR(r, c)); }
int checkRow(int r) { return check(r, 0, 0, 1, '+'); }
int checkCol(int c) { return check(0, 1, c, 0, '+'); }
int checkDiagDR(int r, int c) { return check(r,  1, c, 1, 'x'); }
int checkDiagUR(int r, int c) { return check(r, -1, c, 1, 'x'); }

int check(int r, int dr, int c, int dc, char allowed) {
  int out = 0, r_ = r, c_ = c;
  for ( ; r >= 0 && r < N && c >= 0 && c < N; r += dr, c += dc) {
    if (board[r][c] != '.' && board[r][c] != allowed) { out++; }
  }
  for (r = r_-dr, c = c_-dc; r >= 0 && r < N && c >= 0 && c < N; r -= dr, c -= dc) {
    if (board[r][c] != '.' && board[r][c] != allowed) { out++; }
  }
  return out;
}

  //void printBoard() {
  //  String sep = new String(new char[N+2]).replace("\0", "*");
  //  eprintln(sep);
  //  for (char[] row : board) {
  //    eprintln("*"+new String(row)+"*");
  //  }
  //  eprintln(sep);
  //}
